Java parte 6: Conhecendo o java.util

Para mais teoria : https://www.w3schools.com/java/default.asp

ArrayList teoria e exemplos: https://www.w3schools.com/java/java_arraylist.asp

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Quais foram as desvantagens apontadas ao usar arrays?

Array não sabe quantas posições estão ocupadas (apenas tamanho total)
Isso é uma grande desvantagem. Não queremos saber quantos elementos um array pode ter, mas sim quantos elementos realmente já existem no array.
Array tem um tamanho fixo (não pode crescer dinamicamente)
Uma vez criado, o array sempre terá o mesmo tamanho de elementos. Isso é muito ruim quando não sabemos exatamente quantos elementos precisamos guardar.
Sintaxe fora do padrão "OO Java"
Os arrays realmente têm a sua própria sintaxe, o que dificulta a legibilidade do código.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Quantos elementos um objeto do tipo java.util.ArrayList pode guardar?
O limite é a memória da JVM.
Correto, o único limite é a memória da JVM.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Os generics entraram na versão 1.5 na plataforma Java e foram levemente melhorados no Java 1.7. Quais são os principais benefícios?
O código mais legível, já que fica explícito o tipo dos elementos.
Correto, na criação da lista fica claro qual a intenção. Por exemplo, na declaração abaixo está bem claro que a lista guarda Strings:

ArrayList<String> nomes = new ArrayList<String>();
=====================================================================================================================================
Evitar casts excessivos


Correto, uma vez parametrizada a lista, não precisamos mais o cast, por exemplo:

Cliente ref = (Cliente) lista.get(0); // desnecessário com generics

=====================================================================================================================================
Antecipar problemas de casts no momento de compilação.


Correto, o compilador avisa se erramos no tipo, por exemplo:

ArrayList<String> lista = new ArrayList<String>(); 
lista.add("Nico");
Conta c = lista.get(0); //nao compila

=====================================================================================================================================
Generics <>:
Você encontrou um código legado que ainda não usa generics:

ArrayList lista = new ArrayList();
Cliente cliente = new Cliente();
lista.add(cliente);
Como você pode melhorar o código e aplicar os generics?

Alternativa correta
ArrayList<Cliente> lista = new ArrayList<Cliente>();


Correto, parametrizamos a ArrayList usando <>. Há uma variação/simplificação que entrou no Java 1.7. O código abaixo é equivalente a alternativa:

ArrayList<Cliente> lista = new ArrayList<>();
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O que aprendemos?

Nessa aula começamos a falar sobre lista e conhecemos a classe java.util.ArrayList. Aprendemos:

que a classe java.util.ArrayList encapsula o uso do array e oferece vários métodos de mais alto nível
que uma lista guarda referencias
como usar métodos size, get, remove
como usar o foreach para iterar a ArrayList
que os generics parametrizam classes
que no caso da ArrayList podemos definir o tipo dos elementos através de generics
Isso é apenas o início sobre esse poderoso pacote java.util. Na próxima aula vamos mergulhar mais!