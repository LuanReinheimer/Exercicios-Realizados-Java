Onde está o Lock Pessimista?

Sabemos que ao utilizar Lock Pessimista, possuímos diversas consequências relacionadas à escalabilidade da aplicação. 
Dentre os cenários apresentados abaixo, qual deles poderia ser causado por uso de um Lock Pessimista?

Alternativa correta
O responsável pelo estoque da loja, ao tentar atualizar os dados de um produto, se depara com uma requisição que nunca termina.

Quando usamos Lock Pessimista pedimos uma trava o registro no banco enquanto ocorre o processo de edição. Portanto, caso alguém 
já esteja atualizando um certo registro, outra pessoa ao tentar atualizar o mesmo registro ficará travada aguardando a liberação do registro.

O Lock Pessimista é algo difícil de implementar dentro de uma aplicação web e na verdade é um recurso que o banco de dados oferece. 
Através do EntityManager podemos utilizar o Lock Pessimista (que delega para a conexão JDBC e a conexão trava o registro). Por exemplo:

EntityManager manager = //pega manager
Produto produto = manager.find(Produto.class, 1, LockModeType.PESSIMISTIC_READ); //trava o registro
Nesse exemplo, qualquer outro EntityManager que tenta ler o produto com a id 1 fica travado até o EntityManager em cima finaliza a transação.

-----------------------------------------------------------------------------------------------------------------------------------------------------

Por que Lock Otimista?
PRÓXIMA ATIVIDADE

Qual das alternativas abaixo caracteriza o Lock Otimista ?

Alternativa correta
Colocar um atributo de versionamento no modelo. Qualquer alteração feita irá gerar o incremento, automaticamente, deste atributo. Ao atualizar o 
registro, a versão do registro precisa ser igual a versão do objeto.

Como vimos anteriormente, o Lock Pessimista pode trazer problemas de escalabilidade por exigirem uma trava do registro no banco, esses problemas podem ser 
difíceis de serem diagnosticados. Como alternativa podemos utilizar algo mais leve e caso ocorra algum tipo de conflito tomamos medidas para corrigi-los.

O que fazemos é colocar um atributo de versionamento no modelo . Qualquer alteração feita gerará, automaticamente, o incremento deste atributo. Caso alguém tente
enviar um valor inferior ao que está salvo no banco, receberá uma javax.persistence.OptimisticLockException.
-----------------------------------------------------------------------------------------------------------------------------------------------------

O que aprendemos?

Atualizações concorrentes podem acontecer dentro de uma aplicação web;
Há duas abordagens para lidar com isso: Lock pessimista e otimista;
Lock pessimista trava o registro impedindo acesso concorrente;
O EntityManager possui um método lock para usar o Lock Pessimista;
Lock otimista não trava o registro mas verifica se a atualização é possível;
Lock otimista joga uma exceção no caso de alteração concorrente;
Configurar o Lock otimista na entidade com @Version.
